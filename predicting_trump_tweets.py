# -*- coding: utf-8 -*-
"""Predicting_Trump_tweets.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J86Be6XJjuqEQzeOBBi5tZdTlhZmPKTb

# Predicting Trump's Next Tweet

## Setup

### Importing relevant libraries
"""

pip install --upgrade Tensorflow

from __future__ import absolute_import, division, print_function, unicode_literals

import tensorflow as tf
tf.enable_eager_execution()

import numpy as np
import pandas as pd
import os
import time

"""### Preparing the data """

# get data from github repository (replace 'XXXX' by link to own GitHub repository - removed here to ensure anonimity)
path_to_file = tf.keras.utils.get_file('cleaned_trump_tweets_all.csv', 'https://raw.githubusercontent.com/XXXX')

# print total number of characters in data file
text = open(path_to_file, 'rb').read().decode(encoding='utf-8', errors='ignore')
print ('Length {} characters'.format(len(text)))

# unique characters in the file (needed for mapping to numbers later on )
vocab = sorted(set(text))
print ('{} unique characters'.format(len(vocab)))

"""## Process the text

### From (unique) characters to numbers
"""

# map from characters to numbers 
char2idx = {u:i for i, u in enumerate(vocab)}
idx2char = np.array(vocab)

text_as_int = np.array([char2idx[c] for c in text])

"""### Creating the  training examples and the targets (= next character in sequence)


"""

# the maximum length sentence we want for a single input in characters
seq_length = 100
examples_per_epoch = len(text)//seq_length

# create training examples
char_dataset = tf.data.Dataset.from_tensor_slices(text_as_int)

sequences = char_dataset.batch(seq_length+1, drop_remainder=True)

# duplicate each sequence and shift it by one character ( = target)
def split_input_target(chunk):
    input_text = chunk[:-1]
    target_text = chunk[1:]
    return input_text, target_text

dataset = sequences.map(split_input_target)

"""### Create the training batches

"""

# shuffle the data and pack into batches

# batch size 
BATCH_SIZE = 64
steps_per_epoch = examples_per_epoch//BATCH_SIZE

# buffer size to shuffle the dataset (tensorflow could work with infititely long sequences so it always uses a buffer in which it shuffles the elements)
BUFFER_SIZE = 10000

dataset = dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE, drop_remainder=True)

"""## Build the model"""

# length of the vocabulary in chars
vocab_size = len(vocab)

# embedding dimension 
embedding_dim = 256

# number of RNN units (the number of 'copies' of the same neural network)
rnn_units = 1024

import functools
rnn = functools.partial(
tf.keras.layers.GRU, recurrent_activation='sigmoid')

def build_model(vocab_size, embedding_dim, rnn_units, batch_size):
  model = tf.keras.Sequential([
    tf.keras.layers.Embedding(vocab_size, embedding_dim, 
                              batch_input_shape=[batch_size, None]),
    rnn(rnn_units,
        return_sequences=True, 
        recurrent_initializer='glorot_uniform',
        stateful=True),
    tf.keras.layers.Dense(vocab_size)
  ])
  return model

model = build_model(
  vocab_size = len(vocab), 
  embedding_dim=embedding_dim, 
  rnn_units=rnn_units, 
  batch_size=BATCH_SIZE)

"""## Try the model


"""

for input_example_batch, target_example_batch in dataset.take(1): 
  example_batch_predictions = model(input_example_batch)

# check what model looks like in each layer
model.summary()

sampled_indices = tf.random.categorical(example_batch_predictions[0], num_samples=1)
sampled_indices = tf.squeeze(sampled_indices,axis=-1).numpy()

"""## Train the model

### Attach optimizer and loss function
"""

def loss(labels, logits):
  return tf.keras.losses.sparse_categorical_crossentropy(labels, logits, from_logits=True) # model returns logits so set from_logits = TRUE

example_batch_loss  = loss(target_example_batch, example_batch_predictions)

# compile model
model.compile(
    optimizer = tf.train.AdamOptimizer(),
    loss = loss)

"""### Configure checkpoints"""

# specify where we want to save the checkpoints
checkpoint_dir = './training_checkpoints'

checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt_{epoch}")

checkpoint_callback=tf.keras.callbacks.ModelCheckpoint(
    filepath=checkpoint_prefix,
    save_weights_only=True)

"""### Execute the training"""

# set epochs
EPOCHS=10

history = model.fit(dataset.repeat(), epochs=EPOCHS, steps_per_epoch=steps_per_epoch, callbacks=[checkpoint_callback])

"""## Generate the text!

### Return to the final checkpoint
"""

tf.train.latest_checkpoint(checkpoint_dir)

model = build_model(vocab_size, embedding_dim, rnn_units, batch_size=1)

model.load_weights(tf.train.latest_checkpoint(checkpoint_dir))

model.build(tf.TensorShape([1, None]))

model.summary()

def generate_text(model, start_string):
  # Evaluation step (generating text using the learned model)

  # Number of characters to generate
  num_generate = 140 # Going for 140 characters here because that's a nice tweet size (although nowadays there's a maximum of 280)

  # Converting our start string to numbers (with function we defined all the way in the beginning)
  input_eval = [char2idx[s] for s in start_string]
  input_eval = tf.expand_dims(input_eval, 0)

  # To store the results
  text_generated = []

  # The lower the temperature the less random the prediction will be 
  temperature = 0.3

  model.reset_states()
  for i in range(num_generate):
      predictions = model(input_eval)
      # remove the batch dimension
      predictions = tf.squeeze(predictions, 0)

      # using a multinomial distribution to predict the word returned by the model
      predictions = predictions / temperature
      predicted_id = tf.random.categorical(predictions, num_samples=1)[-1,0].numpy()
      
      # pass the predicted word as the next input to the model
      # along with the previous hidden state
      input_eval = tf.expand_dims([predicted_id], 0)
      
      text_generated.append(idx2char[predicted_id])

  return (start_string + ''.join(text_generated))

# Let Trump tweet!
print(generate_text(model, start_string=u"I am sure"))

# Aaaand again
print(generate_text(model, start_string=u"You must"))